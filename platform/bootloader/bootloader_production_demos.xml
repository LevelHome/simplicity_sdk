<?xml version="1.0" encoding="UTF-8"?>
<demos xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:model="http://www.silabs.com/ss/Studio.ecore" xsi:noNamespaceSchemaLocation="http://www.silabs.com/ss/Demo.ecore">
  <demo name="brd2603a.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*zgm230sb27hgn.*"/>
    <property key="core.boardCompatibility" value="brd2603a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd2603a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd2705a.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b312f1024im48.*"/>
    <property key="core.boardCompatibility" value="brd2705a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd2705a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204a.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23a010f512gm48.*"/>
    <property key="core.boardCompatibility" value="brd4204a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4204a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204b.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23a010f512gm48.*"/>
    <property key="core.boardCompatibility" value="brd4204b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4204b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204c.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23b010f512im48.*"/>
    <property key="core.boardCompatibility" value="brd4204c"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4204c.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204d.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23b010f512im48.*"/>
    <property key="core.boardCompatibility" value="brd4204d"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4204d.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4205a.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*zgm230sa27hnn.*"/>
    <property key="core.boardCompatibility" value="brd4205a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4205a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4205b.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*zgm230sb27hgn.*"/>
    <property key="core.boardCompatibility" value="brd4205b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4205b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4210a.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23b020f512im48.*"/>
    <property key="core.boardCompatibility" value="brd4210a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4210a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4400b.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b312f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4400b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4400b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4400c.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b312f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4400c"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4400c.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4401b.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b322f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4401b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4401b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4401c.demo.bootloader-uart-xmodem-zwave-otw" label="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)">
    <model:description>Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks. This bootloader was created from the bootloader-uart-xmodem sample. Pay attention to the UART configuration when using a custom board.
</model:description>
    <property key="demos.blurb" value="Bootloader - NCP UART XMODEM (OTW for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b322f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4401c"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-uart-xmodem-zwave-otw/bootloader-uart-xmodem-zwave-otw-brd4401c.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|NCP MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd2603a.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*zgm230sb27hgn.*"/>
    <property key="core.boardCompatibility" value="brd2603a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd2603a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd2705a.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b312f1024im48.*"/>
    <property key="core.boardCompatibility" value="brd2705a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd2705a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204a.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23a010f512gm48.*"/>
    <property key="core.boardCompatibility" value="brd4204a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4204a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204b.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23a010f512gm48.*"/>
    <property key="core.boardCompatibility" value="brd4204b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4204b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204c.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23b010f512im48.*"/>
    <property key="core.boardCompatibility" value="brd4204c"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4204c.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4204d.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23b010f512im48.*"/>
    <property key="core.boardCompatibility" value="brd4204d"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4204d.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4205a.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*zgm230sa27hnn.*"/>
    <property key="core.boardCompatibility" value="brd4205a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4205a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4205b.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*zgm230sb27hgn.*"/>
    <property key="core.boardCompatibility" value="brd4205b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4205b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4210a.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg23b020f512im48.*"/>
    <property key="core.boardCompatibility" value="brd4210a"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4210a.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4400b.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b312f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4400b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4400b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4400c.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b312f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4400c"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4400c.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4401b.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b322f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4401b"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4401b.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
  <demo name="brd4401c.demo.bootloader-storage-internal-single-zwave-ota" label="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)">
    <model:description>This sample configuration of the Gecko bootloader configures the bootloader  to use the internal main flash to store firmware update images. The storage  configuration is set up to store a single firmware update image at a time,  in a single storage slot.
</model:description>
    <property key="demos.blurb" value="Bootloader - SoC Internal Storage (OTA for Z-Wave Applications)"/>
    <property key="core.partCompatibility" value=".*efr32zg28b322f1024im68.*"/>
    <property key="core.boardCompatibility" value="brd4401c"/>
    <property key="demos.imageFile" value="asset://com.silabs.sdk.stack.sisdk_2024.12.0/platform/bootloader/demos/bootloader-storage-internal-single-zwave-ota/bootloader-storage-internal-single-zwave-ota-brd4401c.s37"/>
    <property key="core.readmeFiles" value=""/>
    <property key="filters" value="Device\ Type|SoC MCU|Bootloader Project\ Difficulty|Advanced Wireless\ Technology|Z-Wave"/>
    <property key="core.quality" value="PRODUCTION"/>
  </demo>
</demos>
