/***************************************************************************//**
 * GCC Linker script for RAM based DDP applications
 *******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

{#-
  Device specific sizes and addresses. These variables describes the physical
  memory of the device.
#}

{%- if (device_cpu | first) == "cortexm55" %}

  {%- set sram_size = device_dmem_ram_size | first %}
  {%- if trustzone_secure is defined %}
    {#- Use Secure aliases #}
    {%- set sram_addr = device_ram_dmem_addr_s | first %}
  {%- else %}
    {#- Use Non-Secure aliases #}
    {%- set sram_addr = device_ram_dmem_addr_ns | first %}
  {%- endif %}

{%- else %}

  {%- set sram_addr = device_ram_addr | first | default(536870912, true) %}
  {%- set sram_size = device_ram_size | first %}

  {%- if (device_series | first) == 3 %}
    {%- if trustzone_secure is defined %}
      {#- Use Secure aliases #}
      {%- set sram_addr = device_ram_addr_s | first %}
    {%- else %}
      {#- Use Non-Secure aliases #}
      {%- set sram_addr = device_ram_addr_ns | first %}
    {%- endif %}
  {%- endif %}

{%- endif %}

{#-
  Application specific sizes. Here we start to calculate the application view
  of the physical memory.
#}
{%- if memory_ram_start is defined %}
  {%-   set app_ram_start = memory_ram_start | first %}
{%- else %}
  {%-   set app_ram_start = sram_addr %}
{%- endif %}

{%- if memory_ram_size is defined %}
  {%-   set app_ram_size = memory_ram_size | first %}
{%- else %}
  {%-   set app_ram_size = sram_size %}
{%- endif %}

{%- set rtt = 0 %}
{%- if linker_rtt_section is defined %}
  {%-   set rtt = 1 %}
{%- endif %}

 MEMORY
 {
   RAM        (rwx) : ORIGIN = 0x{{ '%0x' % app_ram_start }}, LENGTH = 0x{{ '%0x' % app_ram_size }}
 }

ENTRY(Reset_Handler)

SECTIONS
{

  .vectors :
  {
    linker_vectors_begin = .;
    KEEP(*(.vectors))
    linker_vectors_end = .;

    __Vectors_End = .;
    __Vectors_Size = __Vectors_End - __Vectors;
  } > RAM

  .text :
  {
{%- if rtt == 1 %}
{#-
    SEGGER_RTT section at top of RAM to speed up the discovery
    (requirement for DDP applications).
#}
    . = ALIGN(4);
    *(SEGGER_RTT)
{%- endif %}

    . = ALIGN(32);
    linker_code_begin = .;
    __vma_ramfuncs_start__ = .;
    *(SORT_BY_ALIGNMENT(.text*))
    *(SORT_BY_ALIGNMENT(text_*))
    . = ALIGN(32);
    __vma_ramfuncs_end__ = .;
    linker_code_end = .;

    KEEP(*(.init))
    KEEP(*(.fini))

    /* .ctors */
    *crtbegin.o(.ctors)
    *crtbegin?.o(.ctors)
    *(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
    *(SORT(.ctors.*))
    *(.ctors)

    /* .dtors */
    *crtbegin.o(.dtors)
    *crtbegin?.o(.dtors)
    *(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
    *(SORT(.dtors.*))
    *(.dtors)

    *(.rodata*)
    *(.eh_frame*)
  } > RAM

  .ARM.extab :
  {
    *(.ARM.extab* .gnu.linkonce.armextab.*)
  } > RAM

  __exidx_start = .;
  .ARM.exidx :
  {
    *(.ARM.exidx* .gnu.linkonce.armexidx.*)
  } > RAM
  __exidx_end = .;

  .copy.table :
  {
    . = ALIGN(4);
    __copy_table_start__ = .;

    LONG (_data_load_start)
    LONG (__data_start__)
    LONG ((__data_end__ - __data_start__) / 4)

    /* Add each additional data section here */
/*
    LONG (__etext2)
    LONG (__data2_start__)
    LONG ((__data2_end__ - __data2_start__) / 4)
*/
    __copy_table_end__ = .;
  } > RAM

  .zero.table :
  {
    . = ALIGN(4);
    __zero_table_start__ = .;
    /* Add each additional bss section here */
/*
    LONG (__bss2_start__)
    LONG ((__bss2_end__ - __bss2_start__) / 4)
*/
    __zero_table_end__ = .;
    __etext = .;
  } > RAM


  .stack (NOLOAD):
  {
    . = ALIGN(8);
    __StackLimit = .;
    KEEP(*(.stack*))
    . = ALIGN(4);
    __StackTop = .;
    PROVIDE(__stack = __StackTop);
  } > RAM

{%- if trustzone_secure %}
  /* ARMv8-M stack sealing:
     to use ARMv8-M stack sealing uncomment '.stackseal' section
   */
  .stackseal :
  {
    __StackSeal = .;
    . = . + 8;
    . = ALIGN(8);
  } > RAM
{%- endif %}

  .noinit (NOLOAD):
  {
    *(.noinit*);
  } > RAM

  .data : AT ( _data_load_start )
  {
    . = ALIGN(4);
    __data_start__ = .;
    *(vtable)
    *(SORT_BY_ALIGNMENT(.data*))
    . = ALIGN(4);

    . = ALIGN(4);
    /* preinit data */
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP(*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);

    . = ALIGN(4);
    /* init data */
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP(*(SORT(.init_array.*)))
    KEEP(*(.init_array))
    PROVIDE_HIDDEN (__init_array_end = .);

    . = ALIGN(4);
    /* finit data */
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP(*(SORT(.fini_array.*)))
    KEEP(*(.fini_array))
    PROVIDE_HIDDEN (__fini_array_end = .);

    . = ALIGN(4);
    /* All data end */
    __data_end__ = .;

  } > RAM

  .bss :
  {
    . = ALIGN(4);
    __bss_start__ = .;
    *(SORT_BY_ALIGNMENT(.bss*))
    *(COMMON)
    . = ALIGN(4);
    __bss_end__ = .;
  } > RAM

  .datainit : {
     . = ALIGN(4);
     _data_load_start = .;
      /* reserve space for .data init value */
     . += SIZEOF(.data);
  } > RAM


{%- if "memory_manager" in component_catalog %}
  .memory_manager_heap (NOLOAD):
  {
    . = ALIGN(8);
    __HeapBase = .;
    __end__ = .;
    end = __end__;
    _end = __end__;
    KEEP(*(.memory_manager_heap*))
    __HeapLimit = ORIGIN(RAM) + LENGTH(RAM);
  } > RAM
{%- else %}
  .heap (NOLOAD):
  {
    . = ALIGN(8);
    __HeapBase = .;
    __end__ = .;
    end = __end__;
    _end = __end__;
    KEEP(*(.heap*))
    __HeapLimit = ORIGIN(RAM) + LENGTH(RAM);
  } > RAM
{%- endif %}

  __heap_size = __HeapLimit - __HeapBase;
  __ram_end__ = 0x{{ '%0x' % app_ram_start }} + 0x{{ '%0x' % app_ram_size }};


{%- if (memory_ram_start and not memory_ram_size) or (memory_ram_size and not memory_ram_start)  %}
  ASSERT( 0, "memory_ram_start and memory_ram_size, Should define/undefine both!")
{%- endif %}
}
