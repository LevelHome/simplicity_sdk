/**
 * @file
 * Command Class Color Switch Configuration
 * @remarks This file is auto generated
 * @copyright 2022 Silicon Laboratories Inc.
 */
#include <cc_multilevel_sensor_config.h>

#include <cc_multilevel_sensor_config_api.h>
#include <CC_MultilevelSensor_SensorHandler.h>
#include <CC_MultilevelSensor_SensorHandlerTypes.h>
#include <ZW_typedefs.h>

{% set _sensor_num = namespace(value=0) %}
{% for _endpoint in endpoints %}
  {% for _ in _endpoint["sensors"] %}
    {% set _sensor_num.value = _sensor_num.value + 1 %}
  {% endfor %}
{% endfor %}
#define MULTILEVEL_SENSORS_NUM       ({{_sensor_num.value}})

static sensor_interface_t cc_multilevel_sensors[MULTILEVEL_SENSORS_NUM] = {
{% for _endpoint in endpoints %}
  {% set _endpoint_id = _endpoint["endpoint"] %}
{% for _s in _endpoint["sensors"] %}
  {
    .endpoint = {{_endpoint_id}}
  },
{% endfor %}
{% endfor %}
};

{% for _endpoint in endpoints %}
  {% set _endpoint_id = _endpoint["endpoint"] %}
{% for _instance in _endpoint["sensors"] %}
ZW_WEAK bool
cc_multilevel_sensor_endpoint_{{_endpoint_id}}_{{_instance}}_interface_init()
{
  return true;
}

ZW_WEAK bool
cc_multilevel_sensor_endpoint_{{_endpoint_id}}_{{_instance}}_interface_deinit()
{
  return true;
}

ZW_WEAK bool
cc_multilevel_sensor_endpoint_{{_endpoint_id}}_{{_instance}}_interface_read_value(__attribute__((unused)) sensor_read_result_t* o_result, __attribute__((unused)) uint8_t i_scale)
{
  return false;
}

{% endfor %}
{% endfor %}
void
cc_multilevel_sensor_config_register_instances(void)
{
{% set _sensor_idx = namespace(value=0) %}
{% for _endpoint in endpoints %}
  {% set _endpoint_id = _endpoint["endpoint"] %}
  {% set _sensors = _endpoint["sensors"] %}
{% for _instance in _sensors %}
  {% set _sensor = _sensors[_instance] %}
  cc_multilevel_sensor_init_interface(&cc_multilevel_sensors[{{_sensor_idx.value}}], {{_sensor["name"]}});
  {% for scale in _sensor["scales"] %}
  cc_multilevel_sensor_add_supported_scale_interface(&cc_multilevel_sensors[{{_sensor_idx.value}}], {{scale}});
  {% endfor %}
  cc_multilevel_sensors[{{_sensor_idx.value}}].endpoint = {{_endpoint["endpoint"]}};
  cc_multilevel_sensors[{{_sensor_idx.value}}].init = cc_multilevel_sensor_endpoint_{{_endpoint_id}}_{{_instance}}_interface_init;
  cc_multilevel_sensors[{{_sensor_idx.value}}].deinit = cc_multilevel_sensor_endpoint_{{_endpoint_id}}_{{_instance}}_interface_deinit;
  cc_multilevel_sensors[{{_sensor_idx.value}}].read_value = cc_multilevel_sensor_endpoint_{{_endpoint_id}}_{{_instance}}_interface_read_value;
  cc_multilevel_sensor_registration(&cc_multilevel_sensors[{{_sensor_idx.value}}]);
  {% set _sensor_idx.value = _sensor_idx.value + 1 %}

{% endfor %}
{% endfor %}
}

{% for _i in range(_sensor_num.value) %}
ZAF_CC_REGISTER_CONFIG(COMMAND_CLASS_SENSOR_MULTILEVEL, &cc_multilevel_sensors[{{_i}}], {{_i}});
{% endfor %}
